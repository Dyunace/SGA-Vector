#include <iostream>

using namespace std;

int main(void)
{
	/*
	char str1[2][5] = {
		{'A', 'B','C','D','E'},
		{'F', 'G','H','I','J'}
	};

	char* str2[2] = {
		{(char*)"ABCD"},
		{(char*)"EFGH"}
	};

	for (int i = 0; i < 5; i++)
		cout << (*str1)[i];
	cout << endl;
	*/

	// 1. 데이터 추가 (새로운 공간 확보)
	// 2. 데이터 삭제
	// 3. 데이터를 삽입할 수 있는 공간의 크기
	// 4. 현재 삽입되어 있는 원소의 갯수
	// 5. 컨테이너의 시작 지점
	// 6. 컨테이너의 종료 지점

	return 0;
}

// 배열의 장단점
/*
	배열의 장점

	직접 접근이 가능하다.
	 - 데이터를 거쳐가지 않아도 됀다.

	접근 속도가 일정하다.
	 - 동일한 크기의 데이터를 나열하기 때문에 속도가 일정하다.


	배열의 단점

	동적 변환이 불가능하다.
	 - 한 번 정한 길이를 변경할 수 없다.
*/

// 배열의 길이
/*
	배열의 길이는 변환이 불가능하다.
	데이터를 추가하고 싶다면 새 배열을 만든 뒤, 기존 데이터를 덮어써야 한다.
	하지만, 데이터를 추가하고 삭제하는 과정에서 부하가 걸릴 수 있다.

	배열을 처음 생성할 때 사용량보다 더 크게 만든다.
*/

// 데이터의 복사
/*
	데이터는 이동보다 복사가 더 빠르다.
	데이터의 이동의 정의는 '데이터를 복사한 후, 기존의 데이터를 삭제'이다.
*/